"use strict";function WebSQL(dbName=null,size=2097152){let run=async(statement=null,values=[])=>new Promise((resolve,reject)=>{openDatabase(dbName,1,dbName,size||2097152).transaction(tx=>{tx.executeSql(statement||null,values||[],(t,r)=>{r.tx=t,resolve(r)},(t,e)=>{reject({message:"Error executing SQL statement.",error:e,tx:t})})})});return{run:run,datastore:tableName=>{let store={},created=!1,onEvent=null;const eventHandler=e=>{onEvent&&"function"==typeof onEvent&&onEvent(e)},createStore=async()=>{let create=await run("create table if not exists "+tableName+" (key text primary key not null unique, value text)");return created=!0,create};return store.onEvent=(cb=>{onEvent=cb}),store.put=(async(key,value)=>(created||await createStore(),new Promise(async(resolve,reject)=>{if(!key||"string"!=typeof key)return reject({code:400,message:"A key is required."});let val=JSON.stringify(value);if(await run("replace into "+tableName+" (key, value) values (?,?)",[key,val]).catch(err=>null)){let e={event:"write",key:key,timestamp:Date.now()};eventHandler(e),resolve(e)}else reject({code:400,message:"Could not write data to key."})}))),store.get=(async key=>(created||await createStore(),new Promise(async(resolve,reject)=>{let read=await run("select * from "+tableName+" where key = ?",[key]).catch(err=>null),result={key:key,value:null},rows=Array.from(read.rows);rows&&rows.length>0&&(result.value=JSON.parse(rows[0].value||null)),resolve(result)}))),store.del=(async keys=>{if(created||await createStore(),!keys)return Promise.reject({code:400,message:"A key or an array of keys is required."});let keyIds=[];keyIds="string"==typeof keys?[keys]:keys;let ks=Array.from(new Uint8Array(keyIds.length)).map(val=>"?").join(","),e=(await run("delete from "+tableName+" where key in ("+ks+")",keyIds).catch(err=>(console.log(err),null)),{event:"delete",keys:keyIds,timestamp:Date.now()});return eventHandler(e),e}),store.list=(async(query={})=>{created||await createStore();let statement="select key ";query.values&&(statement+=", value "),statement+="from "+tableName+" ";let values=[];(query.lt||query.gt)&&(statement+="where ",query.lt&&(statement+="key < ? ",values.push(query.lt.toString())),query.gt&&(values[0]&&(statement+="and "),statement+="key > ? ",values.push(query.gt.toString()))),statement+="order by key ",query&&query.reverse&&(statement+="desc "),query&&query.limit&&!isNaN(query.limit)&&(statement+="limit "+parseInt(query.limit)+" ");let result=await run(statement,values).catch(err=>(console.log(err),null));return Array.from(result.rows).map(row=>{let key=row.key.toString(),item=key;return query.values&&(item={key:key,value:JSON.parse(row.value)}),item})}),store.importDB=(async dbArray=>{if(created||await createStore(),!dbArray||dbArray.length<1){let e={db:tableName,event:"importDB",keys:[],timestamp:Date.now()};return eventHandler(e),e}let statement="replace into "+tableName+"(key, value) values ",values=[],keys=[];for(let i=0;i<dbArray.length;i++)statement+="(?,?), ",values.push(dbArray[i].key.toString()),values.push(JSON.stringify(dbArray[i].value)),keys.push(dbArray[i].key);statement=statement.slice(0,-2),await sql.run(statement,values);let e={db:tableName,event:"importDB",keys:keys,timestamp:Date.now()};return eventHandler(e),e}),store.exportDB=(async()=>(created||await createStore(),store.list({deep:!0,values:!0}))),store.deleteDB=(async()=>(created||await createStore(),sql.run("drop table if exists "+tableName).then(result=>{let e={db:tableName,event:"deleteDB",timestamp:Date.now()};return created=!1,eventHandler(e),e}))),store}}}